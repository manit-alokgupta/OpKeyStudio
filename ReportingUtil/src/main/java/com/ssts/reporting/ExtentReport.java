package com.ssts.reporting;

import java.io.File;
import java.util.Stack;

import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.markuputils.Markup;
import com.aventstack.extentreports.markuputils.MarkupHelper;
import com.aventstack.extentreports.reporter.ExtentSparkReporter;

public class ExtentReport implements IReport {

	private ReportBuilder builder;

	private ExtentReports extentReport;
	private ExtentTest aNode = null;

	private Stack<ExtentTest> reportingStacks = new Stack<ExtentTest>();

	public void close() {
		ReportBuilder.report = null;
	}

	ExtentReport(ReportBuilder builder) {
		this.builder = builder;

		ExtentSparkReporter sparkReporter = new ExtentSparkReporter(this.builder.getPath());
		sparkReporter.config().setDocumentTitle(builder.getSessionName());
		sparkReporter.config().setReportName(builder.getSessionName());
		sparkReporter.config().setTheme(com.aventstack.extentreports.reporter.configuration.Theme.STANDARD);
		this.extentReport = new ExtentReports();
		this.extentReport.attachReporter(sparkReporter);
	}

	public void addStep(String action, String[] parameters, Status status) {
		this.addStep(action, parameters, status, null, null);
	}

	public void addStep(String action, String[] parameters, Status status, File snapshotPath) {
		this.addStep(action, parameters, status, null, snapshotPath);
	}

	public void addStep(String action, String[] parameters, Status status, String output, File snapshotPath) {
		this.addStep(action, parameters, status, output, snapshotPath, null);
	}

	public void addStep(String action, String[] parameters, Status status, String output, File snapshotPath,
			Exception ex) {
		System.out.println("@AddStep");

		if (reportingStacks.size() == 0) {
			// no begin testcase yet
			this.beginTestCase("AutoGenerated TC");
		}
		if (aNode == null) {
			aNode = reportingStacks.peek().createNode(reportingStacks.peek().getModel().getName() + " continued...");
		}

		if (ex != null) {
			aNode.error(ex);
		} else {
			int ii = 0;
			String[][] data = new String[parameters.length + 1][];
			data[ii++] = new String[] { "Action: ", action };

			for (String entry : parameters) {
				data[ii++] = new String[] { "Param-" + ii, entry };
			}
			Markup markup = MarkupHelper.createTable(data);
			if (status == Status.PASS)
				aNode.log(com.aventstack.extentreports.Status.PASS, markup);
			else if (status == Status.FAIL)
				aNode.log(com.aventstack.extentreports.Status.FAIL, markup);
			else if (status == Status.InProgress)
				aNode.log(com.aventstack.extentreports.Status.ERROR, markup);
			else if (status == Status.NotStarted)
				aNode.log(com.aventstack.extentreports.Status.SKIP, markup);
		}

		this.extentReport.flush();
	}

	public void beginFunctionLibrary(String flCaseName) {
		System.out.println("@BeginFunctionLibrary");
		if (reportingStacks.size() == 0) {
			// no begin testcase yet
			this.beginTestCase("AutoGenerated TC");
		}
		ExtentTest childNode = reportingStacks.peek().createNode(flCaseName);
		aNode = childNode;
		reportingStacks.push(childNode);
	}

	public void endFunctionLibrary() {
		System.out.println("@EndFL");
		aNode = null;
		reportingStacks.pop();
	}

	public void beginTestCase(String testCaseName) {
		System.out.println("@BeginTest");
		ExtentTest childNode = extentReport.createTest(testCaseName);
		aNode = null;
		reportingStacks.push(childNode);
	}

	public void endTestCase() {
		System.out.println("@EndTest");
		reportingStacks.pop();
		aNode = null;
		this.extentReport.flush();

	}

	public void beginSuite(String suiteName) {
		System.out.println("@BeginSuite");

	}

	public void endSuite() {
		System.out.println("@EndSuite");
		this.extentReport.flush();
	}

}
